{"version":3,"sources":["App.js","serviceWorker.js","store/reducers/optionChainReducer.js","store/reducers/headerReducer.js","store/reducers/profileReducer.js","store/reducers/rootReducer.js","index.js"],"names":["OptionChain","React","lazy","StrategyBuilder","App","className","fallback","Switch","Route","path","component","Component","Boolean","window","location","hostname","match","intialState","data","error","filt","optionChainReducer","state","action","type","webInfo","skill","country","headerReducer","city","company","industries","worktypes","languages","users","jobApplyStatus","msg","info","profileReducer","jobSkill","jobIndustry","industry","userExp","employment","jobLanguage","language","jobWorkType","workType","jobCity","jobAccess","postJob","jobApplyText","jobApply","jobView","webVerify","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","hydrate","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4124cbe6.chunk.js","sourcesContent":["//import React, {  Suspense } from 'react'\nimport React, { Component, Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\n//const OptionChainList = React.lazy(() => import('./pages/optionChainList'));\n//const OptionChainDetail = React.lazy(() => import('./pages/optionChainDetail'));\nconst OptionChain = React.lazy(() => import('./pages/optionChain'));\nconst StrategyBuilder = React.lazy(() => import('./pages/strategyBuilder'));\n//const proxy = require(\"http-proxy-middleware\");\n//const proxy = require('http-proxy-middleware');\n//import Proxy from 'http-proxy-middleware';\n//const { createProxyMiddleware } = require('http-proxy-middleware');\n \n//App.use('/api', createProxyMiddleware({ target: 'http://www.example.org', changeOrigin: true }));\n\n// module.exports = function(App) {\n//     App.use(Proxy('/api/*', { target: 'http://localhost:5000' }))\n// }\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"cards\">\n        <Router>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Switch>\n              {/* <Route exact={true} path='/' component={OptionChainList} /> */}\n              <Route path='/strategy-builder/:strike/:opt/:date' component={StrategyBuilder} />\n              <Route path='/strategy-builder' component={StrategyBuilder} />\n              <Route path='/OptionChain' component={OptionChain} />\n              <Route path='' component={OptionChain} />\n            </Switch>\n          </Suspense>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App; \n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\nconst intialState = {\n    data: null,\n    error: \"\",\n    filt: null\n}\n\nconst optionChainReducer = (state = intialState, action) => {\n    switch (action.type) {\n        case \"FetchData\":\n            return { ...state, data: action.data }\n        default:\n            return state\n    }\n}\nexport default optionChainReducer","\nconst intialState = {\n    webInfo: null,\n    skill: null,\n    country: null,\n    error: \"\"\n}\n\nconst headerReducer = (state = intialState, action) => {\n\n    switch (action.type) {\n        case \"HEADERDATA\":\n            return { ...state, webInfo: action.data }\n        case \"SKILLDATA\":\n            return { ...state, skill: action.data }\n        case \"COUNTRYDATA\":\n            return { ...state, country: action.data }\n        case \"CITYDATA\":\n            return { ...state, city: action.data }\n        case \"COMPANYDATA\":\n            return { ...state, company: action.data }\n        case \"INDUSTRYDATA\":\n            return { ...state, industries: action.data }\n        case \"WORKTYPEDATA\":\n            return { ...state, worktypes: action.data }            \n        case \"LANGUAGEDATA\":\n            return { ...state, languages: action.data } \n        case \"USERDATA\":\n            return { ...state, users: action.data } \n        case \"JOBAPPLYSTATUSDATA\":\n            return { ...state, jobApplyStatus: action.data }     \n        case \"ERROR\":\n            return { ...state, error: action.msg }\n        default:\n            return state\n    }\n}\nexport default headerReducer","\nconst intialState = {\n    info: null,\n    error: \"\",\n}\n\nconst profileReducer = (state = intialState, action) => {\n    switch (action.type) {\n        case \"PROFILEDATA\":\n            return { ...state, info: action.data }\n        case \"SKILL\":\n            state.info.jobSkill = action.data.skill;\n            return { ...state }\n        case \"PROFILEUPDATE\":\n            state.info.users = action.data.users;\n            return { ...state }\n        case \"INDUSTRY\":\n            state.info.jobIndustry = action.data.industry;\n            return { ...state }\n        case \"EXPERIENCE\":\n            state.info.userExp = action.data.employment;\n            return { ...state }\n        case \"LANGUAGE\":\n            state.info.jobLanguage = action.data.language;\n            return { ...state }\n        case \"WORKTYPE\":\n            state.info.jobWorkType = action.data.workType;\n            return { ...state }\n        case \"CITY\":\n            state.info.jobCity = action.data.city;\n            return { ...state }\n        case \"ACCESS\":\n            state.info.jobAccess = action.data.jobAccess;\n            return { ...state }\n        case \"POSTJOB\":\n            state.postJob = action.data;\n            return { ...state }\n        case \"APPLYJOB\":\n            state.info.jobApplyText = action.data.jobApplyText;\n            return { ...state }\n        case \"FETCHAPPLYJOB\":\n            state.info.jobApply = action.data;\n            return { ...state }\n        case \"FETCHVIEWJOB\":\n            state.info.jobView = action.data;\n            return { ...state }\n        case \"APPLYJOBUPDATE\":\n            //state.info.jobApply = action.data.jobApply;\n            return { ...state }\n        case \"VERIFYDATA\":\n            return { ...state, webVerify: action.data }\n        case \"ERROR\":\n            return { ...state, error: action.msg }\n        default:\n            return state\n    }\n}\nexport default profileReducer","import optionChainReducer from './optionChainReducer'\nimport headerReducer from './headerReducer'\nimport profileReducer from './profileReducer'\nimport { combineReducers } from 'redux'\n\n\nconst rootReducer = combineReducers({\n    optionChainReducer,\n    headerReducer,\n    profileReducer\n});\n\nexport default rootReducer\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\nimport './css/style.css';\n//const proxy = require('http-proxy-middleware');\n//import Proxy from 'http-proxy-middleware';\n//const { createProxyMiddleware } = require('http-proxy-middleware');\n \n//App.use('/api', createProxyMiddleware({ target: 'http://www.example.org', changeOrigin: true }));\n\n// module.exports = function(App) {\n//     App.use(Proxy('/api/*', { target: 'http://localhost:5000' }))\n// }\n\n\nimport rootReducer from './store/reducers/rootReducer'\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nReactDOM.hydrate(<Provider store={store}><App /></Provider>, document.getElementById('root'));\nserviceWorker.unregister();"],"sourceRoot":""}